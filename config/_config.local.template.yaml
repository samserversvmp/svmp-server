# Example sam-server configuration file

# External TCP port to listen on for client connections.
# default = 8080
port: 8080

################################################################################
# SSL/TLS configuration
################################################################################

# default = false
enable_ssl: true

# SSL certificate and private key paths
# (required if tls_proxy == true)
server_certificate: 'path/to/server-cert.pem'
private_key: 'path/to/server-key.pem'

# SSL private key password
# (if the server private key file is password protected)
private_key_pass: 'changeme_password'

# TLS CA Cert to validate user certs against
# only used if use_tls_user_auth == true
ca_cert: 'path/to/ca-cert.pem'

################################################################################
# Authentication options
################################################################################

# Enable certificate-based user authentication
# default = false
#cert_user_auth: false

# Are we operating behind a reverse proxy that terminates SSL?
# Only has an effect when cert_user_auth is also true, in which case we expect
# the reverse proxy to inject special headers containing the data from the user
# certificate.
# default = false
#behind_reverse_proxy: false

################################################################################
# sam Overseer settings
################################################################################

# Base URL for the sam Overseer API used to facilitate user VM setup
overseer_url: 'https://sam-login.example.com:3000/'

# Used to verify JSON Web Tokens presented by clients
# this is generated by the overseer, must be placed here manually
overseer_cert: 'path/to/overseer-cert.pem'

# JSON web token to authenticate to the login server as an admin user.
# Generate and obtain this string from the overseer node.
auth_token: 'ABCdef1234.hijKLM567.NOPqrs890'

################################################################################
# Logging options
################################################################################

# Log file path
log_file: 'proxy_log.txt'

# Log level to use, omits lower log levels
# Levels, lowest to highest: silly, debug, verbose, info, warn, error
# default = 'info'
#log_level: 'info'

# Protobuf request messages to filter out when using verbose logging
# default = ['SENSOREVENT', 'TOUCHEVENT']
#log_request_filter: ['SENSOREVENT', 'TOUCHEVENT']

################################################################################
# WebRTC settings for video and audio streaming to the client
################################################################################

webrtc:
    # Enter zero or more servers to use for in ICE negotiation for NAT traversal
    ice_servers:
        # Ex1: Unauthenticated STUN server
        - url: 'stun:<stun server ip>:3478'

        # Ex2: Password protected STUN server
        - url: 'stun:<stun server ip>:3478'
          password: 'stun-credential'

        # Ex3: TURN relay server (username & password required)
        - url: 'turn:<turn server ip>:3478'
          username: 'turn-user'
          password: 'turn-password'

    # WebRTC constraints and paramenters that are sent to the peers.
    # Don't change unless you know what you're doing.
    #video: { audio: true, video: { mandatory: {}, optional: [] } }
    #pc: { optional: [ {DtlsSrtpKeyAgreement: true} ] }
